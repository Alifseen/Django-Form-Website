install django

To create a project, dont create python file, run this command
django-admin startproject mysite .
This creates a project with setting file

to create an application in the project, run
python manage.py startapp job_application
This creates app files you can use to create an app

Add this app in the settings.py in the INSTALLED_APPS list

to run a django project server with your apps, run
python manage.py runserver




Start from the backend aka the database, create a database model
Do this in models.py

create db and columns:
class Form(models.Model)  ## This defines a table with columns
    fname, lname occupation = models.CharField(max_length = )  ##Charfiel is same a Strings
    email = models.EmailField()
    date = models.DateField()

    def __str__(self):  ## This allows returning a string when the instance of the method is printed instead of the memory address.
        return f"fname, lname

database is already created. but to add a table you need to add migrations to it. Run
python manage.py makemigrations
This creates a middle man code between database and the class we created in models.py

to apply these migrations, run
python manage.py migrate

This process needs to be repeated if you want to add or remove any columns




We created a view function in Flask app called index which returned an html file. With django, no need for decorator @app.route, simply:
def index(request):
returns render(request, "html file")

First go to settings and add path to the folder which will contain the HTML Files. if not specified, simply create a folder called "templates" in the app folder and store the HTML there

to connect a page to url, create a url.py file, and
from django.urls import path
from . import views (. means same directory)

urlpatterns =[path("urlpath", views.fucntion, name="html file name"]

add path("", include("appfolder.urls")) to the urls file in mysite directory. Be sure to import include






From Flask App index HTML Only change:
1. remove jinja context manager "get_flasked"
2. for post method add below the line (% csrf_token %)



in the index view function, get form values
request.method == "POST" conditional

create forms.py in same dir as views

django forms
class ApplicationForm(forms.Form)
same as db models code. change models to forms

in view function
import . from forms.ApplicationForm
form = class(request.POST)
fname etc = form.cleaned_data["Key"]  this creates a dictionary with the value of whatever html name attribute matches the key.

execute the fname etc code in if form.is_valid() conditional





models import Forms
Form.object.create(db column name = "data variable name in view function")


django.contrib import messages
meesages.successs(request, message)



setup email
django.code.mail import EmailMessage

message_body=
email = EmailMessage(subject, body, to=[])
email.send()

update email credentials in settings.py
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = smtp.gmail.com
EMAIL_PORT = 587
EMAIL_USE_SSL = True
EMAIL_HOST_USER = alifseen@gmail.com
EMAIL_HOST_PASSWORD = glmxacevprpgxyqk




admin interface using admin.py
.models Forms
admin.site.register(Form)

create superuser
python manage.py createsuperuser
add user name, email and password
Login using this info with URL/admin




change view of the forms
class FormsAdmin(admin.ModelAdmin)
list_display = display name, email, occupation
Search_fields = search by name or email
list_filter = filter by date or occupation
ordering = - for descending
readonly_fields = not editable

admin.site.register(Form, Formsamdin)


Creating a base template

create a copy of index.html and name it base.html
then create a new html about us
index and about us, delete everything from body to top and body to end, including body tags and div container and scripts
in base.html keep everything you deleted in other files and delete the rest. in the main container div type:
{% block content %}
{% endblock %}


connect html files base.html

at top {% extend 'base.html' %}
start with {% block content %}
end with {% endblock %}

view function for about page
url path



add nav bar to base
nav tag
div tag
a href={% url 'index' %}> pythonhow
button
span
div
ul
li
a about
li
a contact